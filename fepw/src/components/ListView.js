import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import NoteCard from './NoteCard.js';
import { Row, Col } from 'reactstrap';
import './index.css';
import axios from 'axios';

//28 June This is what I keep referring to as the home page. It's where all the notes are listed and everything gets redirected back to here after creating, editing, and deleting.

class ListView extends Component {
	constructor(props) {
		super(props);
		this.state = {
			notes: []
		};
	}

componentDidMount() {
	this.gatherNotes();
}

gatherNotes = () => {
	axios.get('https://blooming-dusk-34216.herokuapp.com/notes/')
		.then(response => {
			console.log(response)
			this.setState({ notes: response.data });
		})
		.catch(error => console.log(error));

//28 June I think everything here is pretty straightforward. I send the axios.get to my backend, and it retrieves my notes.

render() {
	return (<div className='wrapper'>
			<div>
				<Row>
					<Col className='alignRight'>
			//			<span className='toplinks'><Link to =''><button className='registerButton' color='link'>Register</button></Link></span>
			//			<span><Link to =''><button className='editButton' color='link'>Login</button></Link></span>
					</Col>
				</Row>
				<Row>
					<Col>
						<div className='head'>
							<h5> Your Notes:</h5>
						</div>
						<br />
						<div className='cards'>
							{ this.state.notes.map( (note, index) => <div><Link to='/NoteView' style={{ textDecoration: 'none' }}><NoteCard className='eachcard' key={index} updateSelectedNotecard={this.props.updateSelectedNotecard} { ...note} /><br /></Link></div>)}
						</div>
//28 June The previous comments don't really express what a labor of love this line was. It took forever to get it just right. Basically, to display the notecards, I needed to map over the array generated by the axios.get, call the NoteCard component to display them correctly, turn each card into a Link to the NoteView component so that when the user clicks on one it can be displayed individually, and make sure that when someone clicks on a card, state gets updated so the selected card gets sent to state. I also tried to assign each card a key here, but it ended up not doing much good as I can't display the cards individually by their key number or anything - I didn't get that far into the routing. That part could probably be removed but it's not breaking anything, so I left it in.

//But anyway, the updateSelectedNotecard state gets passed to props so other components can access the individual card that the user clicks. It would have made more sense to work with the key/index numbers but at the time I was having so much trouble with that, so this is how it ended up. Sorry about that. Maybe at some point I can rewrite this whole app so that it is cleaner and easier to follow.
					</Col>
				</Row>
			</div>
		</div>
	)
}
}

export default ListView;

// 21May - Yeah, I have no idea what I'm doing with this yet. At some point we have to map through all the cards and display them but I'm not sure if I'll end up doing that in this component or elsewhere. It's here for right now.
// 22May - Right now I'm using this to display a list of all my notecards. I suppose that eventually we want that list to display more as blocks rather than a vertical list but one thing at a time.
// 24May - Figured out how to get rid of text decoration whenever I hover over a card - you have to style the link because that is where the 'a' element is hiding.
