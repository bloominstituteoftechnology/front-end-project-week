import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import withStyles from '../styles/withStyles';
import TableContext from './TableContext';
export const styles = theme => ({
  /* Styles applied to the root element. */
  root: {
    display: 'table',
    fontFamily: theme.typography.fontFamily,
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0
  }
});

function Table(props) {
  const {
    classes,
    className,
    component: Component,
    padding
  } = props,
        other = _objectWithoutProperties(props, ["classes", "className", "component", "padding"]);

  return React.createElement(TableContext.Provider, {
    value: {
      padding
    }
  }, React.createElement(Component, _extends({
    className: classNames(classes.root, className)
  }, other)));
}

Table.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * The content of the table, normally `TableHead` and `TableBody`.
   */
  children: PropTypes.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   */
  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),

  /**
   * Allows TableCells to inherit padding of the Table.
   */
  padding: PropTypes.oneOf(['default', 'checkbox', 'dense', 'none'])
} : {};
Table.defaultProps = {
  component: 'table',
  padding: 'default'
};
export default withStyles(styles, {
  name: 'MuiTable'
})(Table);