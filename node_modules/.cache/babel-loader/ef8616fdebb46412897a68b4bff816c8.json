{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\rdesa\\\\Desktop\\\\LambdaSchool\\\\front-end-project-week\\\\src\\\\components\\\\Form.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _this.changeHandler = function (event) {\n      event.preventDefault();\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      if (_this.state.title !== '' && _this.state.body !== '') {\n        // create a new note\n        if (_this.state.tags !== '') {\n          var _tags = _this.state.tags.split(',');\n\n          console.log(_tags);\n        }\n\n        var newNote = {\n          tags: tags,\n          title: _this.state.title,\n          textBody: _this.state.body\n        };\n        console.log(newNote); // if there's a note on state to edit, start PUT\n\n        if (_this.state.note !== null) {\n          axios.put(\"https://fe-notes.herokuapp.com/note/edit/\".concat(_this.state.note._id), newNote).then(function (res) {\n            console.log(res);\n          }).catch(function (err) {\n            console.log(err);\n          });\n        } // else POST\n        else {\n            axios.post('https://fe-notes.herokuapp.com/note/create', newNote).then(function (res) {\n              console.log(res);\n            }).catch(function (err) {\n              return console.log(err);\n            });\n          } // blank out everything.\n\n\n        _this.setState({\n          added: true,\n          title: '',\n          body: '',\n          note: null\n        });\n      } // alert user to fill form if not complete\n      else {\n          alert('Please fill out the form!');\n        }\n    };\n\n    _this.state = {\n      title: '',\n      body: '',\n      tags: '',\n      added: false,\n      note: null\n    };\n    return _this;\n  } // if the user has clicked on an edit button, some data will get filled on state related to that note.\n\n\n  _createClass(Form, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.location.state !== undefined) {\n        this.setState({\n          note: this.props.location.state.note,\n          title: this.props.location.state.note.title,\n          body: this.props.location.state.note.textBody,\n          tags: this.props.location.state.note.tags\n        });\n      }\n\n      this.setState({\n        added: false\n      });\n    } // standard change handler.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // once form is submitted, redirect home.\n      // if (this.state.added === true) {\n      //     return (\n      //         <Redirect to='/'></Redirect>\n      //     )\n      // }\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.note !== null ? 'Edit Note:' : 'Add Note:'), React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        autoComplete: \"off\",\n        className: \"fullpage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"title\",\n        type: \"text\",\n        name: \"title\",\n        placeholder: \"Title your note...\",\n        defaultValue: this.state.note !== null ? this.state.note.title : this.props.value,\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"textarea\", {\n        className: \"body\",\n        name: \"body\",\n        placeholder: \"The main text of your note goes here...\",\n        value: this.state.note !== null ? this.state.body : this.props.value,\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"tags\",\n        type: \"text\",\n        name: \"tags\",\n        placeholder: \"Tag your note (comma-separated)\",\n        defaultValue: this.state.note !== null ? this.state.note.tags : this.props.value,\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport default Form;","map":{"version":3,"sources":["C:\\Users\\rdesa\\Desktop\\LambdaSchool\\front-end-project-week\\src\\components\\Form.js"],"names":["React","Component","Redirect","axios","Form","props","changeHandler","event","preventDefault","setState","target","name","value","submitHandler","state","title","body","tags","split","console","log","newNote","textBody","note","put","_id","then","res","catch","err","post","added","alert","location","undefined"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport axios from 'axios';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: '',\n            tags: '',\n            added: false,\n            note: null,\n        }\n    }\n\n    // if the user has clicked on an edit button, some data will get filled on state related to that note.\n    componentDidMount() {\n        if (this.props.location.state !== undefined) {\n            this.setState({\n                note: this.props.location.state.note,\n                title: this.props.location.state.note.title,\n                body: this.props.location.state.note.textBody,\n                tags: this.props.location.state.note.tags,\n            })\n        }\n        this.setState({\n            added: false,\n        })\n    }\n\n    // standard change handler.\n    changeHandler = event => {\n        event.preventDefault();\n        this.setState({\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    // controls add and edit functionality, with blank form error handling.\n    submitHandler = event => {\n        event.preventDefault();\n        if (this.state.title !== '' && this.state.body !== '') {\n          // create a new note\n          if (this.state.tags !== '') {\n            const tags = this.state.tags.split(',')\n            console.log(tags)\n          }\n          const newNote = {\n            tags: tags,\n            title: this.state.title,\n            textBody: this.state.body,\n          }\n          console.log(newNote)\n          // if there's a note on state to edit, start PUT\n          if (this.state.note !== null) {\n            axios.put(`https://fe-notes.herokuapp.com/note/edit/${this.state.note._id}`, newNote)\n                 .then(res => {console.log(res)})\n                 .catch(err => {console.log(err)})\n          }\n          // else POST\n          else {\n            axios.post('https://fe-notes.herokuapp.com/note/create', newNote)\n                 .then(res => {console.log(res)})\n                 .catch(err => console.log(err))\n          }\n          // blank out everything.\n          this.setState({\n              added: true,\n              title: '',\n              body: '',\n              note: null,\n          })\n        }\n        // alert user to fill form if not complete\n        else {\n          alert('Please fill out the form!')\n        }\n      }\n\n\n    render() {\n        // once form is submitted, redirect home.\n        // if (this.state.added === true) {\n        //     return (\n        //         <Redirect to='/'></Redirect>\n        //     )\n        // }\n        return (\n            <div className='container'>\n                <h1>{this.state.note !== null ? 'Edit Note:' : 'Add Note:'}</h1>\n                <form onSubmit={this.submitHandler} autoComplete='off' className='fullpage'>\n\n                    <input \n                        className='title'\n                        type='text' \n                        name='title' \n                        placeholder='Title your note...' \n                        defaultValue={this.state.note !== null ? this.state.note.title : this.props.value}\n                        onChange={this.changeHandler}\n                    />\n\n                    <textarea  \n                        className='body'\n                        name='body' \n                        placeholder='The main text of your note goes here...' \n                        value={this.state.note !== null ? this.state.body : this.props.value}\n                        onChange={this.changeHandler}>\n                    </textarea>\n\n                    <input \n                        className='tags'\n                        type='text' \n                        name='tags' \n                        placeholder='Tag your note (comma-separated)' \n                        defaultValue={this.state.note !== null ? this.state.note.tags : this.props.value}\n                        onChange={this.changeHandler}\n                    />\n                    \n                    <input type='submit' />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}