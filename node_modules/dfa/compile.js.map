{"version":3,"file":null,"sources":["src/utils.js","src/nodes.js","src/grammar.js","src/SymbolTable.js","src/dfa.js","src/StateMachine.js","src/compile.js"],"sourcesContent":["/**\n * Returns a new set representing the union of a and b.\n */\nexport function union(a, b) {\n  let s = new Set(a);\n  addAll(s, b);\n  return s;\n}\n\n/**\n * Adds all items from the set b to a.\n */\nexport function addAll(a, b) {\n  for (let x of b) {\n    a.add(x);\n  }\n}\n\n/**\n * Returns whether two sets are equal\n */\nexport function equal(a, b) {\n  if (a === b)\n    return true;\n\n  if (a.size !== b.size)\n    return false;\n\n  for (let x of a) {\n    if (!b.has(x)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {addAll, union} from './utils';\n\n/**\n * Base AST node\n */\nexport class Node {\n  constructor() {\n    Object.defineProperty(this, 'followpos', {value: new Set})\n  }\n\n  calcFollowpos() {\n    for (let key in this) {\n      if (this[key] instanceof Node) {\n        this[key].calcFollowpos();\n      }\n    }\n  }\n}\n\n/**\n * Represents a variable reference\n */\nexport class Variable extends Node {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  copy() {\n    return new Variable(this.name);\n  }\n}\n\n/**\n * Represents a comment\n */\nexport class Comment extends Node {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n}\n\n/**\n * Represents an assignment statement.\n * e.g. `variable = expression;`\n */\nexport class Assignment extends Node {\n  constructor(variable, expression) {\n    super();\n    this.variable = variable;\n    this.expression = expression;\n  }\n}\n\n/**\n * Represents an alternation.\n * e.g. `a | b`\n */\nexport class Alternation extends Node {\n  constructor(a, b) {\n    super();\n    this.a = a;\n    this.b = b;\n  }\n\n  get nullable() {\n    return this.a.nullable || this.b.nullable;\n  }\n\n  get firstpos() {\n    return union(this.a.firstpos, this.b.firstpos);\n  }\n\n  get lastpos() {\n    return union(this.a.lastpos, this.b.lastpos);\n  }\n\n  copy() {\n    return new Alternation(this.a.copy(), this.b.copy());\n  }\n}\n\n/**\n * Represents a concatenation, or chain.\n * e.g. `a b c`\n */\nexport class Concatenation extends Node {\n  constructor(a, b) {\n    super();\n    this.a = a;\n    this.b = b;\n  }\n\n  get nullable() {\n    return this.a.nullable && this.b.nullable;\n  }\n\n  get firstpos() {\n    let s = this.a.firstpos;\n    if (this.a.nullable) {\n      s = union(s, this.b.firstpos);\n    }\n\n    return s;\n  }\n\n  get lastpos() {\n    let s = this.b.lastpos;\n    if (this.b.nullable) {\n      s = union(s, this.a.lastpos);\n    }\n\n    return s;\n  }\n\n  calcFollowpos() {\n    super.calcFollowpos();\n    for (let n of this.a.lastpos) {\n      addAll(n.followpos, this.b.firstpos);\n    }\n  }\n\n  copy() {\n    return new Concatenation(this.a.copy(), this.b.copy());\n  }\n}\n\n/**\n * Represents a repetition.\n * e.g. `a+`, `b*`, or `c?`\n */\nexport class Repeat extends Node {\n  constructor(expression, op) {\n    super();\n    this.expression = expression;\n    this.op = op;\n  }\n\n  get nullable() {\n    return this.op === '*' || this.op === '?';\n  }\n\n  get firstpos() {\n    return this.expression.firstpos;\n  }\n\n  get lastpos() {\n    return this.expression.lastpos;\n  }\n\n  calcFollowpos() {\n    super.calcFollowpos();\n    if (this.op === '*' || this.op === '+') {\n      for (let n of this.lastpos) {\n        addAll(n.followpos, this.firstpos);\n      }\n    }\n  }\n\n  copy() {\n    return new Repeat(this.expression.copy(), this.op);\n  }\n}\n\nexport function buildRepetition(expression, min = 0, max = Infinity) {\n  if (min < 0 || min > max) {\n    throw new Error(`Invalid repetition range: ${min} ${max}`);\n  }\n\n  let res = null;\n  for (let i = 0; i < min; i++) {\n    res = concat(res, expression.copy());\n  }\n\n  if (max === Infinity) {\n    res = concat(res, new Repeat(expression.copy(), '*'));\n  } else {\n    for (let i = min; i < max; i++) {\n      res = concat(res, new Repeat(expression.copy(), '?'))\n    }\n  }\n\n  return res;\n}\n\nfunction concat(a, b) {\n  if (!a) {\n    return b;\n  }\n\n  return new Concatenation(a, b);\n}\n\n/**\n * Base class for leaf nodes\n */\nclass Leaf extends Node {\n  get nullable() {\n    return false;\n  }\n\n  get firstpos() {\n    return new Set([this]);\n  }\n\n  get lastpos() {\n    return new Set([this]);\n  }\n}\n\n/**\n * Represents a literal value, e.g. a number\n */\nexport class Literal extends Leaf {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  copy() {\n    return new Literal(this.value);\n  }\n}\n\n/**\n * Marks the end of an expression\n */\nexport class EndMarker extends Leaf {}\n\n/**\n * Represents a tag\n * e.g. `a:(a b)`\n */\nexport class Tag extends Leaf {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  get nullable() {\n    return true;\n  }\n\n  copy() {\n    return new Tag(this.name);\n  }\n}\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { rules: peg$parserules },\n      peg$startRuleFunction  = peg$parserules,\n\n      peg$c0 = function(s) { return s },\n      peg$c1 = \"#\",\n      peg$c2 = peg$literalExpectation(\"#\", false),\n      peg$c3 = /^[^\\r\\n]/,\n      peg$c4 = peg$classExpectation([\"\\r\", \"\\n\"], true, false),\n      peg$c5 = /^[\\r\\n]/,\n      peg$c6 = peg$classExpectation([\"\\r\", \"\\n\"], false, false),\n      peg$c7 = function(v) { return new n.Comment(v.join('')) },\n      peg$c8 = \"=\",\n      peg$c9 = peg$literalExpectation(\"=\", false),\n      peg$c10 = \";\",\n      peg$c11 = peg$literalExpectation(\";\", false),\n      peg$c12 = function(v, e) { return new n.Assignment(v, e) },\n      peg$c13 = function(v) { return new n.Variable(v) },\n      peg$c14 = \"|\",\n      peg$c15 = peg$literalExpectation(\"|\", false),\n      peg$c16 = function(a, b) { return new n.Alternation(a, b) },\n      peg$c17 = function(a, b) { return new n.Concatenation(a, b) },\n      peg$c18 = \":\",\n      peg$c19 = peg$literalExpectation(\":\", false),\n      peg$c20 = function(t, e) { return new n.Concatenation(e, new n.Tag(t)) },\n      peg$c21 = \"*\",\n      peg$c22 = peg$literalExpectation(\"*\", false),\n      peg$c23 = function(t) { return new n.Repeat(t, '*') },\n      peg$c24 = \"?\",\n      peg$c25 = peg$literalExpectation(\"?\", false),\n      peg$c26 = function(t) { return new n.Repeat(t, '?') },\n      peg$c27 = \"+\",\n      peg$c28 = peg$literalExpectation(\"+\", false),\n      peg$c29 = function(t) { return new n.Repeat(t, '+') },\n      peg$c30 = \"{\",\n      peg$c31 = peg$literalExpectation(\"{\", false),\n      peg$c32 = \"}\",\n      peg$c33 = peg$literalExpectation(\"}\", false),\n      peg$c34 = function(t, m) { return n.buildRepetition(t, m, m) },\n      peg$c35 = \",\",\n      peg$c36 = peg$literalExpectation(\",\", false),\n      peg$c37 = function(t, min) { return n.buildRepetition(t, min, Infinity) },\n      peg$c38 = function(t, max) { return n.buildRepetition(t, 0, max) },\n      peg$c39 = function(t, min, max) { return n.buildRepetition(t, min, max) },\n      peg$c40 = function(x) { return new n.Literal(x) },\n      peg$c41 = \"(\",\n      peg$c42 = peg$literalExpectation(\"(\", false),\n      peg$c43 = \")\",\n      peg$c44 = peg$literalExpectation(\")\", false),\n      peg$c45 = function(e) { return e },\n      peg$c46 = function() { return n.buildRepetition() },\n      peg$c47 = function(a, b) { return a + b.join('') },\n      peg$c48 = \"_\",\n      peg$c49 = peg$literalExpectation(\"_\", false),\n      peg$c50 = /^[a-zA-Z]/,\n      peg$c51 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n      peg$c52 = /^[0-9]/,\n      peg$c53 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c54 = function(num) { return parseInt(num.join('')) },\n      peg$c55 = /^[ \\t\\r\\n]/,\n      peg$c56 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parserules() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsestatement();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsestatement();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestatement() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestatement_type();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestatement_type() {\n    var s0;\n\n    s0 = peg$parseassignment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecomment();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c3.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c5.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c7(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassignment() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevariable();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealternation();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s7 = peg$c10;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariable() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c13(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsealternation() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconcatenation();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 124) {\n          s3 = peg$c14;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealternation();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseconcatenation();\n    }\n\n    return s0;\n  }\n\n  function peg$parseconcatenation() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parserepeat();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseconcatenation();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c17(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserepeat();\n    }\n\n    return s0;\n  }\n\n  function peg$parserepeat() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s2 = peg$c18;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parserepeat();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseterm();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s2 = peg$c21;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseterm();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s2 = peg$c24;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseterm();\n          if (s1 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s2 = peg$c27;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c29(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseterm();\n            if (s1 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 123) {\n                s2 = peg$c30;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsenumber();\n                if (s3 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s4 = peg$c32;\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                  }\n                  if (s4 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c34(s1, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseterm();\n              if (s1 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 123) {\n                  s2 = peg$c30;\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parsenumber();\n                  if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s4 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s4 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s4 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s5 = peg$c32;\n                        peg$currPos++;\n                      } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c37(s1, s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parseterm();\n                if (s1 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 123) {\n                    s2 = peg$c30;\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s3 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parsenumber();\n                      if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s5 = peg$c32;\n                          peg$currPos++;\n                        } else {\n                          s5 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                        }\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c38(s1, s4);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseterm();\n                  if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s2 = peg$c30;\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parsenumber();\n                      if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s4 = peg$c35;\n                          peg$currPos++;\n                        } else {\n                          s4 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                        }\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsenumber();\n                          if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s6 = peg$c32;\n                              peg$currPos++;\n                            } else {\n                              s6 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                            }\n                            if (s6 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c39(s1, s3, s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseterm();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseterm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parsevariable();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s1 = peg$c41;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsealternation();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s3 = peg$c43;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c44); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parserepetition() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c30;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename_start_char();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsename_char();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsename_char();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_start_char() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 95) {\n      s0 = peg$c48;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c49); }\n    }\n    if (s0 === peg$FAILED) {\n      if (peg$c50.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c51); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_char() {\n    var s0;\n\n    s0 = peg$parsename_start_char();\n    if (s0 === peg$FAILED) {\n      if (peg$c52.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c53); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c52.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c52.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c54(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c55.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c56); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c55.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c56); }\n      }\n    }\n\n    return s0;\n  }\n\n\n    var n = require('./nodes');\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import {Assignment, Literal, Node, Variable} from './nodes';\n\n/**\n * Processes a list of statements into a symbol table\n */\nexport default class SymbolTable {\n  constructor(statements, externalSymbols = {}) {\n    this.variables = {};\n    this.symbols = {};\n    this.main = null;\n    this.size = 0;\n\n    this.addExternalSymbols(externalSymbols);\n    this.process(statements);\n  }\n\n  addExternalSymbols(externalSymbols) {\n    for (let key in externalSymbols) {\n      this.variables[key] = new Literal(externalSymbols[key]);\n      this.symbols[key] = externalSymbols[key];\n      this.size++;\n    }\n  }\n\n  process(statements) {\n    for (let statement of statements) {\n      if (statement instanceof Assignment) {\n        this.variables[statement.variable.name] = this.processExpression(statement.expression);\n\n        if (statement.expression instanceof Literal) {\n          this.symbols[statement.variable.name] = statement.expression.value;\n          this.size++;\n        }\n      }\n    }\n\n    this.main = this.variables.main;\n    if (!this.main) {\n      throw new Error('No main variable declaration found');\n    }\n  }\n\n  processExpression(expr) {\n    // Process children\n    for (let key in expr) {\n      if (expr[key] instanceof Node) {\n        expr[key] = this.processExpression(expr[key]);\n      }\n    }\n\n    // Replace variable references with their values\n    if (expr instanceof Variable) {\n      let value = this.variables[expr.name];\n      if (value == null)\n        throw new Error(`Undeclared indentifier ${expr.name}`);\n\n      expr = this.processExpression(value.copy());\n    }\n\n    return expr;\n  }\n}\n","import {EndMarker, Concatenation, Literal, Tag} from './nodes';\nimport {addAll, equal} from './utils';\n\nconst END_MARKER = new EndMarker;\n\n/**\n * This is an implementation of the direct regular expression to DFA algorithm described\n * in section 3.9.5 of \"Compilers: Principles, Techniques, and Tools\" by Aho,\n * Lam, Sethi, and Ullman. http://dragonbook.stanford.edu\n * There is a PDF of the book here:\n * http://www.informatik.uni-bremen.de/agbkb/lehre/ccfl/Material/ALSUdragonbook.pdf\n */\nexport default function buildDFA(root, numSymbols) {\n  root = new Concatenation(root, END_MARKER);\n  root.calcFollowpos();\n\n  let failState = new State(new Set, numSymbols);\n  let initialState = new State(root.firstpos, numSymbols);\n  let dstates = [failState, initialState];\n\n  // while there is an unmarked state S in dstates\n  while (1) {\n    let s = null;\n\n    for (let j = 1; j < dstates.length; j++) {\n      if (!dstates[j].marked) {\n        s = dstates[j];\n        break;\n      }\n    }\n\n    if (s == null) {\n      break;\n    }\n\n    // mark S\n    s.marked = true;\n\n    // for each input symbol a\n    for (let a = 0; a < numSymbols; a++) {\n      // let U be the union of followpos(p) for all\n      //  p in S that correspond to a\n      let u = new Set;\n      for (let p of s.positions) {\n        if (p instanceof Literal && p.value === a) {\n          addAll(u, p.followpos);\n        }\n      }\n\n      if (u.size === 0) {\n        continue;\n      }\n\n      // if U is not in dstates\n      let ux = -1;\n      for (let i = 0; i < dstates.length; i++) {\n        if (equal(u, dstates[i].positions)) {\n          ux = i;\n          break;\n        }\n      }\n\n      if (ux === -1) {\n        // Add U as an unmarked state to dstates\n        dstates.push(new State(u, numSymbols));\n        ux = dstates.length - 1;\n      }\n\n      s.transitions[a] = ux;\n    }\n  }\n\n  return dstates;\n}\n\nclass State {\n  constructor(positions, len) {\n    this.positions = positions;\n    this.transitions = new Uint16Array(len);\n    this.accepting = positions.has(END_MARKER);\n    this.marked = false;\n    this.tags = new Set;\n\n    for (let pos of positions) {\n      if (pos instanceof Tag) {\n        this.tags.add(pos.name);\n      }\n    }\n  }\n}\n","const INITIAL_STATE = 1;\nconst FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\nexport default class StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  match(str) {\n    let self = this;\n    return {\n      *[Symbol.iterator]() {\n        let state = INITIAL_STATE;\n        let startRun = null;\n        let lastAccepting = null;\n        let lastState = null;\n\n        for (let p = 0; p < str.length; p++) {\n          let c = str[p];\n\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            }\n\n            // reset the state as if we started over from the initial state\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          }\n\n          // start a run if not in the failure state\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          }\n\n          // if accepting, mark the potential match end\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          }\n\n          // reset the state to the initial state if we get into the failure state\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        }\n\n        // yield the last match if any\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n    };\n  }\n\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n  apply(str, actions) {\n    for (let [start, end, tags] of this.match(str)) {\n      for (let tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n}\n","import grammar from './grammar';\nimport SymbolTable from './SymbolTable';\nimport buildDFA from './dfa';\nimport StateMachine from './StateMachine';\n\nexport function parse(string, externalSymbols) {\n  let ast = grammar.parse(string);\n  return new SymbolTable(ast, externalSymbols);\n}\n\nexport function build(symbolTable) {\n  let states = buildDFA(symbolTable.main, symbolTable.size);\n\n  return new StateMachine({\n    stateTable: states.map(s => Array.from(s.transitions)),\n    accepting: states.map(s => s.accepting),\n    tags: states.map(s => Array.from(s.tags))\n  });\n}\n\nexport default function compile(string, externalSymbols) {\n  return build(parse(string, externalSymbols));\n}\n"],"names":["union","a","b","s","addAll","x","add","equal","size","has","Node","defineProperty","value","key","calcFollowpos","Variable","name","Comment","Assignment","variable","expression","Alternation","copy","nullable","firstpos","lastpos","Concatenation","n","followpos","Repeat","op","buildRepetition","min","max","Infinity","Error","res","i","concat","Leaf","Literal","EndMarker","Tag","peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","description","hex","ch","charCodeAt","toString","toUpperCase","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","rules","peg$parserules","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$literalExpectation","peg$c3","peg$c4","peg$classExpectation","peg$c5","peg$c6","peg$c7","v","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","e","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","t","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","m","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","num","parseInt","peg$c55","peg$c56","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","peg$otherExpectation","error","peg$buildSimpleError","ignoreCase","peg$anyExpectation","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","peg$fail","push","s0","s1","peg$parsestatement","s2","peg$parsestatement_type","peg$parse_","peg$parseassignment","peg$parsecomment","s3","test","charAt","s4","s5","s6","s7","peg$parsevariable","peg$parsealternation","peg$parsename","peg$parseconcatenation","peg$parserepeat","peg$parseterm","peg$parsenumber","peg$parserepetition","peg$parsename_start_char","peg$parsename_char","require$$0","SymbolTable","statements","externalSymbols","variables","symbols","main","addExternalSymbols","process","statement","processExpression","expr","END_MARKER","buildDFA","root","numSymbols","failState","State","initialState","dstates","marked","u","positions","ux","transitions","len","Uint16Array","accepting","tags","INITIAL_STATE","FAIL_STATE","StateMachine","dfa","stateTable","str","self","state","c","startRun","lastAccepting","lastState","actions","match","start","end","tag","parse","string","ast","grammar","build","symbolTable","states","map","compile"],"mappings":"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"}