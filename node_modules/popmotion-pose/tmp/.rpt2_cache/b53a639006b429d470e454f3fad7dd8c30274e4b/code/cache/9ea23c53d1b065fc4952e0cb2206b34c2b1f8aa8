{"code":"export var BoundingBoxDimension;\r\n(function (BoundingBoxDimension) {\r\n    BoundingBoxDimension[\"width\"] = \"width\";\r\n    BoundingBoxDimension[\"height\"] = \"height\";\r\n    BoundingBoxDimension[\"left\"] = \"left\";\r\n    BoundingBoxDimension[\"right\"] = \"right\";\r\n    BoundingBoxDimension[\"top\"] = \"top\";\r\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\r\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\r\n//# sourceMappingURL=types.js.map","map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"src/types.ts\"],\"names\":[],\"mappings\":\"AA4FA,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,yCAAiB,CAAA;IACjB,qCAAa,CAAA;IACb,uCAAe,CAAA;IACf,mCAAW,CAAA;IACX,yCAAiB,CAAA;AACnB,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B\"}","dts":{"name":"/Users/mattperry/Sites/popmotion/packages/popmotion-pose/types.d.ts","text":"import { ValueType } from 'style-value-types';\r\nimport { Action, ValueReaction, ColdSubscription } from 'popmotion';\r\nimport { Poser, PoserConfig } from 'pose-core';\r\nimport { Pose, PoseMap, PoserState, ExtendAPI, TransformPose, ReadValueFromSource } from 'pose-core';\r\nimport { Styler } from 'stylefire';\r\nexport declare type Value = {\r\n    raw: ValueReaction;\r\n    type?: ValueType;\r\n};\r\nexport declare type Pose = Pose<Action>;\r\nexport declare type PoseMap = PoseMap<Action>;\r\nexport declare type PoserState = PoserState<Value, Action, ColdSubscription, DomPopmotionPoser>;\r\nexport declare type Transformer = (v: any) => any;\r\nexport declare type TransitionProps = {\r\n    from: string | number;\r\n    velocity: number;\r\n    to: string | number;\r\n    key: string;\r\n    prevPoseKey: string;\r\n    dimensions: Dimensions;\r\n};\r\nexport declare type ResolverProps = TransitionProps & {\r\n    [key: string]: any;\r\n};\r\nexport declare type Transition = (props: ResolverProps) => Action | false;\r\nexport interface DomPopmotionPoser extends Poser<Value, Action, ColdSubscription, DomPopmotionPoser> {\r\n    addChild: (element: Element, config: PoserConfig<Value>) => DomPopmotionPoser;\r\n    flip: (op: Function) => Promise<any>;\r\n    measure: () => BoundingBox;\r\n}\r\nexport declare type DragBounds = {\r\n    [key in BoundingBoxDimension]?: number | string;\r\n};\r\nexport declare type DomPopmotionConfig = {\r\n    onDragStart?: (e: MouseEvent | TouchEvent) => any;\r\n    onDragEnd?: (e: MouseEvent | TouchEvent) => any;\r\n    onPressStart?: (e: MouseEvent | TouchEvent) => any;\r\n    onPressEnd?: (e: MouseEvent | TouchEvent) => any;\r\n    draggable?: Draggable;\r\n    hoverable?: boolean;\r\n    dragBounds?: DragBounds | ((props: ResolverProps) => DragBounds);\r\n    props?: {\r\n        [key: string]: any;\r\n    };\r\n    [key: string]: any;\r\n};\r\nexport declare type Draggable = boolean | 'x' | 'y';\r\nexport declare type PopmotionPoserFactoryConfig<P> = {\r\n    extendAPI: ExtendAPI<Value, Action, ColdSubscription, P>;\r\n    transformPose: TransformPose<Value, Action, ColdSubscription, P>;\r\n    addListenerToValue: (key: string, styler: Styler) => (v: any) => void;\r\n    readValueFromSource?: ReadValueFromSource;\r\n    posePriority?: string[];\r\n    setValueNative: (key: string, to: any, props: {\r\n        elementStyler: Styler;\r\n    }) => void;\r\n};\r\nexport declare type Dimensions = {\r\n    get: (measurement?: BoundingBoxDimension) => BoundingBox | number;\r\n    measurementAsPixels: (measurement: BoundingBoxDimension, value: string | number, type?: ValueType) => number;\r\n    measure: () => BoundingBox;\r\n    has: () => boolean;\r\n};\r\nexport declare type BoundingBox = {\r\n    [key in BoundingBoxDimension]: number;\r\n};\r\nexport declare enum BoundingBoxDimension {\r\n    width = \"width\",\r\n    height = \"height\",\r\n    left = \"left\",\r\n    right = \"right\",\r\n    top = \"top\",\r\n    bottom = \"bottom\"\r\n}\r\nexport declare type AnimationDef = {\r\n    type: 'tween' | 'physics' | 'spring' | 'decay' | 'keyframes';\r\n    min?: number;\r\n    max?: number;\r\n    delay?: number;\r\n    round?: boolean;\r\n    [key: string]: any;\r\n};\r\n"}}
