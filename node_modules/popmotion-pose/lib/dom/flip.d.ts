import { Action, ColdSubscription } from 'popmotion';
import { Dimensions, Value, DomPopmotionPoser } from '../types';
import { Poser } from 'pose-core';
export declare const isFlipPose: (flip: boolean, key: string, state: import("pose-core/lib/types").PoserState<Value, Action, ColdSubscription, DomPopmotionPoser>) => boolean;
export declare const setValue: ({ values, props }: import("pose-core/lib/types").PoserState<Value, Action, ColdSubscription, DomPopmotionPoser>, key: string, to: any) => void;
export declare const flipPose: (props: import("pose-core/lib/types").PoserState<Value, Action, ColdSubscription, DomPopmotionPoser>, nextPose: import("pose-core/lib/types").Pose<Action>) => {
    scaleX?: number;
    scaleY?: number;
    x?: number;
    y?: number;
    transition?: import("pose-core/lib/types").TransitionMap<Action> | import("pose-core/lib/types").TransitionFactory<Action>;
    delay?: number | import("pose-core/lib/types").NumberPropFactory;
    delayChildren?: number | import("pose-core/lib/types").NumberPropFactory;
    staggerChildren?: number | import("pose-core/lib/types").NumberPropFactory;
    staggerDirection?: 1 | -1 | import("pose-core/lib/types").StaggerDirectionPropFactory;
    beforeChildren?: boolean | import("pose-core/lib/types").BooleanPropFactory;
    afterChildren?: boolean | import("pose-core/lib/types").BooleanPropFactory;
    preTransform?: () => any;
    applyAtStart?: import("pose-core/lib/types").ApplyMap;
    applyAtEnd?: import("pose-core/lib/types").ApplyMap;
};
export { Action, Dimensions, ColdSubscription, DomPopmotionPoser, Poser, Value };
