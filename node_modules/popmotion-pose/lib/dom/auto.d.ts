export declare const isToAuto: ({ width, height }: import("pose-core/lib/types").Pose<import("popmotion/lib/action").Action>) => boolean;
export declare const isFromAuto: ({ width, height }: import("pose-core/lib/types").Pose<import("popmotion/lib/action").Action>, state: import("pose-core/lib/types").PoserState<import("popmotion-pose/src/types").Value, import("popmotion/lib/action").Action, import("popmotion/lib/action/types").ColdSubscription, import("popmotion-pose/src/types").DomPopmotionPoser>) => boolean;
export declare const convertAuto: (state: import("pose-core/lib/types").PoserState<import("popmotion-pose/src/types").Value, import("popmotion/lib/action").Action, import("popmotion/lib/action/types").ColdSubscription, import("popmotion-pose/src/types").DomPopmotionPoser>, pose: import("pose-core/lib/types").Pose<import("popmotion/lib/action").Action>) => {
    [x: string]: any;
    transition?: import("pose-core/lib/types").TransitionMap<import("popmotion/lib/action").Action> | import("pose-core/lib/types").TransitionFactory<import("popmotion/lib/action").Action>;
    delay?: number | import("pose-core/lib/types").NumberPropFactory;
    delayChildren?: number | import("pose-core/lib/types").NumberPropFactory;
    staggerChildren?: number | import("pose-core/lib/types").NumberPropFactory;
    staggerDirection?: 1 | -1 | import("pose-core/lib/types").StaggerDirectionPropFactory;
    beforeChildren?: boolean | import("pose-core/lib/types").BooleanPropFactory;
    afterChildren?: boolean | import("pose-core/lib/types").BooleanPropFactory;
    preTransform?: () => any;
};
export declare const convertAutoFrom: (state: import("pose-core/lib/types").PoserState<import("popmotion-pose/src/types").Value, import("popmotion/lib/action").Action, import("popmotion/lib/action/types").ColdSubscription, import("popmotion-pose/src/types").DomPopmotionPoser>, pose: import("pose-core/lib/types").Pose<import("popmotion/lib/action").Action>) => import("pose-core/lib/types").Pose<import("popmotion/lib/action").Action>;
