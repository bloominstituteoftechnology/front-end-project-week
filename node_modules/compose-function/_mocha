var compose$635 = require('./index.js'), curry$636 = require('chickencurry'), expect$637 = require('expect.js');
function inc$638(x$644) {
    return x$644 + 1;
}
function add2$639(x$645) {
    return x$645 + 2;
}
function sqr$640(x$646) {
    return x$646 * x$646;
}
function even$641(x$647) {
    return x$647 % 2 === 0;
}
function filter$642(list$648, where$649) {
    var newList$650 = [];
    for (var i$651 = 0; i$651 < list$648.length; i$651++) {
        if (where$649(list$648[i$651]))
            newList$650.push(list$648[i$651]);
    }
    return newList$650;
}
function map$643(list$652, mapper$653) {
    var newList$654 = [];
    for (var i$655 = 0; i$655 < list$652.length; i$655++) {
        newList$654.push(mapper$653(list$652[i$655]));
    }
    return newList$654;
}
describe('compose-function', function () {
    it('should compose a new function', function () {
        expect$637(compose$635(inc$638)).to.be.a('function');
        expect$637(compose$635(inc$638)(0)).to.equal(1);
        expect$637(compose$635(inc$638, inc$638)(0)).to.equal(2);
        expect$637(compose$635(add2$639, inc$638)(0)).to.equal(3);
        expect$637(compose$635(inc$638, sqr$640)(2)).to.equal(5);
        expect$637(compose$635(sqr$640, inc$638)(2)).to.equal(9);
        expect$637(compose$635(add2$639, add2$639, sqr$640, inc$638, inc$638)(2)).to.equal(20);
        expect$637(compose$635(curry$636(map$643, curry$636.__, sqr$640), curry$636(filter$642, curry$636.__, even$641))([
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ])).to.eql([
            4,
            16,
            36,
            64
        ]);
        expect$637(compose$635(compose$635(curry$636(map$643, curry$636.__, sqr$640)), compose$635(curry$636(filter$642, curry$636.__, even$641)))([
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ])).to.eql([
            4,
            16,
            36,
            64
        ]);
    });
    it('should fail if no function is passed', function () {
        expect$637(compose$635(1)).to.throwError();
        expect$637(compose$635(null)).to.throwError();
        expect$637(compose$635(undefined)).to.throwError();
        expect$637(compose$635(inc$638, 1)).to.throwError();
        expect$637(compose$635(inc$638, null)).to.throwError();
        expect$637(compose$635(inc$638, undefined)).to.throwError();
    });
});
describe('compose-function/macro', function () {
    it('should compose a new function', function () {
        expect$637(inc$638).to.be.a('function');
        expect$637(inc$638(0)).to.equal(1);
        expect$637(function () {
            var comp$664 = require('compose-function');
            return comp$664(inc$638, inc$638);
        }()(0)).to.equal(2);
        expect$637(function () {
            var comp$665 = require('compose-function');
            return comp$665(add2$639, inc$638);
        }()(0)).to.equal(3);
        expect$637(function () {
            var comp$666 = require('compose-function');
            return comp$666(inc$638, sqr$640);
        }()(2)).to.equal(5);
        expect$637(function () {
            var comp$667 = require('compose-function');
            return comp$667(sqr$640, inc$638);
        }()(2)).to.equal(9);
        expect$637(function () {
            var comp$668 = require('compose-function');
            return comp$668(add2$639, function () {
                var comp$669 = require('compose-function');
                return comp$669(add2$639, function () {
                    var comp$670 = require('compose-function');
                    return comp$670(sqr$640, function () {
                        var comp$671 = require('compose-function');
                        return comp$671(inc$638, inc$638);
                    }());
                }());
            }());
        }()(2)).to.equal(20);
    });
});
