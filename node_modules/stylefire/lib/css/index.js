"use strict";
import * as tslib_1 from "tslib";
import createStyler from '../styler';
import prefixer from './prefixer';
import buildStyles, { aliasMap } from './render';
import { isTransformProp } from './transform-props';
import getValueType from './value-types';
var SCROLL_LEFT = 'scrollLeft';
var SCROLL_TOP = 'scrollTop';
var scrollValues = new Set([SCROLL_LEFT, SCROLL_TOP]);
var cssStyler = createStyler({
    onRead: function (key, _a) {
        var element = _a.element, preparseOutput = _a.preparseOutput;
        var valueType = getValueType(key);
        if (isTransformProp(key)) {
            return valueType ? valueType.default || 0 : 0;
        }
        else if (scrollValues.has(key)) {
            return element[key];
        }
        else {
            var domValue = window
                .getComputedStyle(element, null)
                .getPropertyValue(prefixer(key, true)) || 0;
            return preparseOutput && valueType && valueType.parse
                ? valueType.parse(domValue)
                : domValue;
        }
    },
    onRender: function (state, _a, changedValues) {
        var element = _a.element, enableHardwareAcceleration = _a.enableHardwareAcceleration;
        element.style.cssText += buildStyles(state, changedValues, enableHardwareAcceleration, scrollValues);
        if (changedValues.indexOf(SCROLL_LEFT) !== -1)
            element.scrollLeft = state.scrollLeft;
        if (changedValues.indexOf(SCROLL_TOP) !== -1)
            element.scrollTop = state.scrollTop;
    },
    aliasMap: aliasMap,
    uncachedValues: scrollValues
});
export default function (element, props) {
    return cssStyler(tslib_1.__assign({ element: element, enableHardwareAcceleration: true, preparseOutput: true }, props));
};
//# sourceMappingURL=index.js.map