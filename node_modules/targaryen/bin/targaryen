#!/usr/bin/env node

'use strict';

const json = require('firebase-json');

const path = require('path');
const Table = require('cli-table');
const colors = require('colors');
const helpers = require('../lib/util');
const TestJig = require('../lib/test-cmd');
const argv = require('minimist')(process.argv.slice(2), {boolean: true});

if (argv._.length < 2) {

  console.error('Usage: targaryen [--verbose] [--debug] RULES_JSON_PATH TEST_JSON_PATH');
  process.exit(1);

}

const rulesJSONPath = path.resolve(argv._[0]);
const testJSONPath = path.resolve(argv._[1]);
const rules = json.loadSync(rulesJSONPath, 'utf8');
const tests = require(testJSONPath);

const jig = new TestJig(rules, tests);
const results = jig.run();
const totalCount = results.length;
const table = new Table({
  head: ['Path', 'Type', 'Auth', 'Expect', 'Got']
});
let failCount = 0;

results.forEach(result => {

  if (argv.debug) {
    console.log(result.info);
    console.log();
  }

  const expected = result.expected ? '✓'.green : '✖'.red;
  const actual = result.allowed ? '✓'.green : '✖'.red;
  let authStr;

  if (result.auth && result.auth.$description) {
    authStr = result.auth.$description;
  } else if (typeof result.auth === 'string') {
    authStr = result.auth;
  } else {
    authStr = JSON.stringify(result.auth);
  }

  if (expected === actual) {
    table.push([result.path, result.type, authStr, expected, actual]);
  } else {
    table.push([
      colors.bgRed(result.path),
      colors.bgRed(result.type),
      colors.bgRed(authStr),
      expected,
      actual
    ]);
  }

  if (result.type === 'read' && result.expected !== result.allowed) {

    failCount++;
    if (result.expected === true) {
      console.error(colors.red(helpers.unreadableError(result)));
    } else {
      console.error(colors.red(helpers.readableError(result)));
    }
    console.error();

  } else if (result.type === 'write' && result.expected !== result.allowed) {

    failCount++;
    if (result.expected === true) {
      console.error(colors.red(helpers.unwritableError(result)));
    } else {
      console.error(colors.red(helpers.writableError(result)));
    }
    console.error();

  }

});

if (argv.verbose) {
  console.log(table.toString());
}

console.log();
console.log(failCount + ' failures in ' + totalCount + ' tests');

process.exit(failCount > 0 ? 1 : 0);
