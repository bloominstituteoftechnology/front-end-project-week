'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _csv = require('./lib/csv');

var _csv2 = _interopRequireDefault(_csv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PrefixSuffixType = _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string, _propTypes2.default.number]);

var CsvDownload = function (_Component) {
  _inherits(CsvDownload, _Component);

  function CsvDownload() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CsvDownload);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CsvDownload.__proto__ || Object.getPrototypeOf(CsvDownload)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      // eslint-disable-next-line react/destructuring-assignment
      csv: (0, _csv2.default)(_this.props.columns, _this.props.datas, _this.props.separator, _this.props.noHeader)
    }, _this.handleClick = function () {
      var _this$props = _this.props,
          suffix = _this$props.suffix,
          prefix = _this$props.prefix,
          bom = _this$props.bom;
      var csv = _this.state.csv;


      var bomCode = bom ? '%EF%BB%BF' : '';
      var filename = _this.props.filename;


      if (filename.indexOf('.csv') === -1) {
        filename += '.csv';
      }

      if (suffix) {
        if (typeof suffix === 'string' || typeof suffix === 'number') {
          filename = filename.replace('.csv', '_' + suffix + '.csv');
        } else {
          filename = filename.replace('.csv', '_' + new Date().getTime() + '.csv');
        }
      }

      if (prefix) {
        if (typeof prefix === 'string' || typeof prefix === 'number') {
          filename = prefix + '_' + filename;
        } else {
          filename = new Date().getTime() + '_' + filename;
        }
      }

      var a = document.createElement('a');
      var blob = new Blob(['' + bomCode + csv], { type: 'text/csv;charset=utf-8' });
      a.textContent = 'download';
      a.download = filename;
      a.href = URL.createObjectURL(blob);
      a.click();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CsvDownload, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.setState({
        csv: (0, _csv2.default)(props.columns, props.datas, props.separator, props.noHeader)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          text = _props.text;


      if (typeof children === 'undefined') {
        return _react2.default.createElement(
          'button',
          { onClick: this.handleClick, type: 'button' },
          function () {
            if (text) {
              return text;
            }
            return 'Download';
          }()
        );
      }

      return _react2.default.createElement(
        'div',
        { onClick: this.handleClick, onKeyPress: this.handleClick, role: 'button', tabIndex: 0 },
        children
      );
    }
  }, {
    key: '__reactstandin__regenerateByEval',
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return CsvDownload;
}(_react.Component);

CsvDownload.propTypes = {
  bom: _propTypes2.default.bool,
  children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string, _propTypes2.default.element]),
  columns: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array, _propTypes2.default.arrayOf(_propTypes2.default.object)]),
  datas: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array])).isRequired,
  filename: _propTypes2.default.string.isRequired,
  noHeader: _propTypes2.default.bool,
  prefix: PrefixSuffixType,
  separator: _propTypes2.default.string,
  text: _propTypes2.default.string,
  suffix: PrefixSuffixType
};
CsvDownload.defaultProps = {
  separator: ',',
  columns: false,
  bom: true,
  noHeader: false
};
var _default = CsvDownload;
exports.default = _default;
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(PrefixSuffixType, 'PrefixSuffixType', 'src/index.js');
  reactHotLoader.register(CsvDownload, 'CsvDownload', 'src/index.js');
  reactHotLoader.register(_default, 'default', 'src/index.js');
  leaveModule(module);
})();

;