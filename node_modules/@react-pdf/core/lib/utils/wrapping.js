'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SAFETY_HEIGHT = 15;

var splitPage = function splitPage(words, availableHeight, getHeight) {
  var minIndex = 0;
  var maxIndex = words.length;
  var currentIndex = void 0;
  var currentElement = void 0;
  var result = void 0;

  while (minIndex <= maxIndex) {
    currentIndex = (minIndex + maxIndex) / 2 | 0;
    currentElement = getHeight(words.slice(0, currentIndex).join(' '));

    if (currentElement < availableHeight) {
      result = currentIndex;
      minIndex = currentIndex + 1;
    } else if (currentElement >= availableHeight) {
      maxIndex = currentIndex - 1;
    }
  }

  return result || 1;
};

var chunkString = exports.chunkString = function chunkString(string, availableHeight, getHeight) {
  if (availableHeight > SAFETY_HEIGHT) {
    var words = string.split(' ');
    var pageIndex = splitPage(words, availableHeight, getHeight);

    return [words.slice(0, pageIndex).join(' '), words.slice(pageIndex).join(' ')];
  }

  return ['', string];
};

// Given an element and an availableHeight, returns a new element that fits
// into it and edits the original one with the remaining content
// TODO: split nested children
var splitElement = exports.splitElement = function splitElement(element, availableHeight, getHeight) {
  var newElement = element.clone();
  var margin = element.getMargin();
  var padding = element.getPadding();

  var lines = chunkString(element.getRawValue(), availableHeight - padding.top - padding.bottom - margin.top - margin.bottom, getHeight);

  newElement.children = [lines[0]];
  element.children = [lines[1]];

  return newElement;
};