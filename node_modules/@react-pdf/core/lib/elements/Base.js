'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _yogaLayout = require('yoga-layout');

var _yogaLayout2 = _interopRequireDefault(_yogaLayout);

var _lodash = require('lodash.topairsin');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isfunction');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.upperfirst');

var _lodash6 = _interopRequireDefault(_lodash5);

var _lodash7 = require('lodash.pick');

var _lodash8 = _interopRequireDefault(_lodash7);

var _warning = require('fbjs/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _stylesheet = require('../stylesheet');

var _stylesheet2 = _interopRequireDefault(_stylesheet);

var _debug = require('../mixins/debug');

var _debug2 = _interopRequireDefault(_debug);

var _borders = require('../mixins/borders');

var _borders2 = _interopRequireDefault(_borders);

var _styles = require('../utils/styles');

var _wrapping = require('../utils/wrapping');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Base = function () {
  function Base(root, props) {
    _classCallCheck(this, Base);

    this.parent = null;
    this.children = [];

    this.root = root;

    this.props = _extends({}, this.constructor.defaultProps, Base.defaultProps, props);

    (0, _warning2.default)(!this.props.styles, '"styles" prop passed instead of "style" prop');

    this.layout = _yogaLayout2.default.Node.createDefault();
    this.canBeSplitted = false;
  }

  _createClass(Base, [{
    key: 'appendChild',
    value: function appendChild(child) {
      child.parent = this;
      this.children.push(child);
      this.layout.insertChild(child.layout, this.layout.getChildCount());
    }
  }, {
    key: 'removeChild',
    value: function removeChild(child) {
      var index = this.children.indexOf(child);

      child.parent = null;
      this.children.splice(index, 1);
      this.layout.removeChild(child.layout);
    }
  }, {
    key: 'applyProps',
    value: function applyProps() {
      var _this = this;

      var page = this.getPage();
      var pageSize = page.getSize();

      this.style = this.style || _stylesheet2.default.resolve(this.props.style, {
        width: pageSize[0],
        height: pageSize[1],
        orientation: page.getOrientation()
      });

      (0, _lodash2.default)(this.style).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            attribute = _ref2[0],
            value = _ref2[1];

        _this.applyStyle(attribute, value);
      });

      this.children.forEach(function (child) {
        if (child.applyProps) {
          child.applyProps();
        }
      });
    }
  }, {
    key: 'applyStyle',
    value: function applyStyle(attribute, value) {
      var setter = 'set' + (0, _lodash6.default)(attribute);

      switch (attribute) {
        case 'marginTop':
          this.layout.setMargin(_yogaLayout2.default.EDGE_TOP, value);
          break;
        case 'marginRight':
          this.layout.setMargin(_yogaLayout2.default.EDGE_RIGHT, value);
          break;
        case 'marginBottom':
          this.layout.setMargin(_yogaLayout2.default.EDGE_BOTTOM, value);
          break;
        case 'marginLeft':
          this.layout.setMargin(_yogaLayout2.default.EDGE_LEFT, value);
          break;
        case 'paddingTop':
          this.layout.setPadding(_yogaLayout2.default.EDGE_TOP, value);
          break;
        case 'paddingRight':
          this.layout.setPadding(_yogaLayout2.default.EDGE_RIGHT, value);
          break;
        case 'paddingBottom':
          this.layout.setPadding(_yogaLayout2.default.EDGE_BOTTOM, value);
          break;
        case 'paddingLeft':
          this.layout.setPadding(_yogaLayout2.default.EDGE_LEFT, value);
          break;
        case 'borderTopWidth':
          this.layout.setBorder(_yogaLayout2.default.EDGE_TOP, value);
          break;
        case 'borderRightWidth':
          this.layout.setBorder(_yogaLayout2.default.EDGE_RIGHT, value);
          break;
        case 'borderBottomWidth':
          this.layout.setBorder(_yogaLayout2.default.EDGE_BOTTOM, value);
          break;
        case 'borderLeftWidth':
          this.layout.setBorder(_yogaLayout2.default.EDGE_LEFT, value);
          break;
        case 'position':
          this.layout.setPositionType(value === 'absolute' ? _yogaLayout2.default.POSITION_TYPE_ABSOLUTE : _yogaLayout2.default.POSITION_TYPE_RELATIVE);
          break;
        case 'top':
          this.setPosition(_yogaLayout2.default.EDGE_TOP, value);
          break;
        case 'right':
          this.setPosition(_yogaLayout2.default.EDGE_RIGHT, value);
          break;
        case 'bottom':
          this.setPosition(_yogaLayout2.default.EDGE_BOTTOM, value);
          break;
        case 'left':
          this.setPosition(_yogaLayout2.default.EDGE_LEFT, value);
          break;
        default:
          if ((0, _lodash4.default)(this.layout[setter])) {
            this.layout[setter](value);
          }
      }
    }
  }, {
    key: 'setPosition',
    value: function setPosition(edge, value) {
      var isPercent = /^(\d+)?%$/g.exec(value);

      if (isPercent) {
        this.layout.setPositionPercent(edge, parseInt(isPercent[1], 10));
      } else {
        this.layout.setPosition(edge, value);
      }
    }
  }, {
    key: 'recalculateLayout',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var childs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return Promise.all(this.children.map(function (child) {
                  return child.recalculateLayout();
                }));

              case 2:
                childs = _context.sent;
                return _context.abrupt('return', childs);

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function recalculateLayout() {
        return _ref3.apply(this, arguments);
      }

      return recalculateLayout;
    }()
  }, {
    key: 'getPage',
    value: function getPage() {
      return this.parent.getPage();
    }
  }, {
    key: 'getAbsoluteLayout',
    value: function getAbsoluteLayout() {
      var myLayout = this.layout.getComputedLayout();

      var parentLayout = this.parent.getAbsoluteLayout ? this.parent.getAbsoluteLayout() : { left: 0, top: 0 };

      return {
        left: myLayout.left + parentLayout.left,
        top: myLayout.top + parentLayout.top,
        height: myLayout.height,
        width: myLayout.width
      };
    }
  }, {
    key: 'getPadding',
    value: function getPadding() {
      return {
        top: this.layout.getComputedPadding(_yogaLayout2.default.EDGE_TOP),
        right: this.layout.getComputedPadding(_yogaLayout2.default.EDGE_RIGHT),
        bottom: this.layout.getComputedPadding(_yogaLayout2.default.EDGE_BOTTOM),
        left: this.layout.getComputedPadding(_yogaLayout2.default.EDGE_LEFT)
      };
    }
  }, {
    key: 'getMargin',
    value: function getMargin() {
      return {
        top: this.layout.getComputedMargin(_yogaLayout2.default.EDGE_TOP),
        right: this.layout.getComputedMargin(_yogaLayout2.default.EDGE_RIGHT),
        bottom: this.layout.getComputedMargin(_yogaLayout2.default.EDGE_BOTTOM),
        left: this.layout.getComputedMargin(_yogaLayout2.default.EDGE_LEFT)
      };
    }
  }, {
    key: 'getWidth',
    value: function getWidth() {
      return this.layout.getComputedWidth() + this.layout.getComputedMargin(_yogaLayout2.default.EDGE_LEFT) + this.layout.getComputedMargin(_yogaLayout2.default.EDGE_RIGTH) - this.layout.getComputedPadding(_yogaLayout2.default.EDGE_LEFT) - this.layout.getComputedPadding(_yogaLayout2.default.EDGE_RIGTH);
    }
  }, {
    key: 'getHeight',
    value: function getHeight() {
      return this.layout.getComputedHeight() + this.layout.getComputedMargin(_yogaLayout2.default.EDGE_TOP) + this.layout.getComputedMargin(_yogaLayout2.default.EDGE_BOTTOM) - this.layout.getComputedPadding(_yogaLayout2.default.EDGE_TOP) - this.layout.getComputedPadding(_yogaLayout2.default.EDGE_BOTTOM);
    }
  }, {
    key: 'getComputedStyles',
    value: function getComputedStyles() {
      var element = this.parent;
      var inheritedStyles = {};

      while (element && element.parent) {
        inheritedStyles = _extends({}, element.parent.style, element.style, inheritedStyles);
        element = element.parent;
      }

      return _extends({}, (0, _lodash8.default)(inheritedStyles, _styles.inheritedProperties), this.style);
    }
  }, {
    key: 'drawBackgroundColor',
    value: function drawBackgroundColor() {
      var _getAbsoluteLayout = this.getAbsoluteLayout(),
          left = _getAbsoluteLayout.left,
          top = _getAbsoluteLayout.top,
          width = _getAbsoluteLayout.width,
          height = _getAbsoluteLayout.height;

      var _getComputedStyles = this.getComputedStyles(),
          backgroundColor = _getComputedStyles.backgroundColor;

      if (backgroundColor) {
        this.root.fillColor(backgroundColor).rect(left, top, width, height).fill();
      }
    }
  }, {
    key: 'clone',
    value: function clone() {
      var clone = new this.constructor(this.root, this.props);

      clone.style = this.style;
      clone.parent = this.parent;
      clone.layout = this.layout;
      clone.children = this.children;

      return clone;
    }
  }, {
    key: 'fillRemainingSpace',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(page, element, availableHeight) {
        var _this2 = this;

        var getHeight, newElement, renderedChilds, i, child, childHeight;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!element.canBeSplitted) {
                  _context2.next = 7;
                  break;
                }

                getHeight = function getHeight(value) {
                  element.setFontSize();
                  var elementMargin = element.getMargin();
                  var elementPadding = element.getPadding();

                  return _this2.root.heightOfString(value, {
                    width: _this2.getWidth() - elementMargin.right - elementMargin.left - elementPadding.right - elementPadding.left
                  });
                };

                newElement = (0, _wrapping.splitElement)(element, availableHeight, getHeight);
                _context2.next = 5;
                return newElement.render();

              case 5:
                _context2.next = 24;
                break;

              case 7:
                renderedChilds = [];
                i = 0;

              case 9:
                if (!(i < element.children.length)) {
                  _context2.next = 23;
                  break;
                }

                child = element.children[i];
                childHeight = child.getHeight();

                if (!(availableHeight >= childHeight)) {
                  _context2.next = 19;
                  break;
                }

                _context2.next = 15;
                return child.render(page);

              case 15:
                renderedChilds.push(child);

                availableHeight -= childHeight;
                _context2.next = 20;
                break;

              case 19:
                return _context2.abrupt('break', 23);

              case 20:
                i++;
                _context2.next = 9;
                break;

              case 23:

                // Remove rendered childs
                renderedChilds.forEach(function (child) {
                  if (!child.props.fixed) {
                    element.removeChild(child);
                  }
                });

              case 24:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function fillRemainingSpace(_x, _x2, _x3) {
        return _ref4.apply(this, arguments);
      }

      return fillRemainingSpace;
    }()
  }, {
    key: 'renderWrapChildren',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(page) {
        var _this3 = this;

        var i, isFirstElement, availableHeight, renderedChilds, child, childHeight, j, _child;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                i = void 0;
                isFirstElement = true;
                availableHeight = this.parent.getHeight();
                renderedChilds = [];
                i = 0;

              case 5:
                if (!(i < this.children.length)) {
                  _context3.next = 28;
                  break;
                }

                child = this.children[i];
                childHeight = child.getHeight();

                if (!(child.props.break && !isFirstElement)) {
                  _context3.next = 13;
                  break;
                }

                page.addNewSubpage();
                return _context3.abrupt('break', 28);

              case 13:
                if (!(availableHeight >= childHeight)) {
                  _context3.next = 20;
                  break;
                }

                _context3.next = 16;
                return child.render(page);

              case 16:
                renderedChilds.push(child);

                availableHeight -= childHeight;
                _context3.next = 24;
                break;

              case 20:
                _context3.next = 22;
                return this.fillRemainingSpace(page, child, availableHeight);

              case 22:

                page.addNewSubpage();
                return _context3.abrupt('break', 28);

              case 24:

                if (!child.props.fixed) {
                  isFirstElement = false;
                }

              case 25:
                i++;
                _context3.next = 5;
                break;

              case 28:
                j = i;

              case 29:
                if (!(j < this.children.length)) {
                  _context3.next = 37;
                  break;
                }

                _child = this.children[j];

                if (!_child.props.fixed) {
                  _context3.next = 34;
                  break;
                }

                _context3.next = 34;
                return _child.render(page);

              case 34:
                j++;
                _context3.next = 29;
                break;

              case 37:

                // Remove rendered childs
                renderedChilds.forEach(function (child) {
                  if (!child.props.fixed) {
                    _this3.removeChild(child);
                  }
                });

              case 38:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function renderWrapChildren(_x4) {
        return _ref5.apply(this, arguments);
      }

      return renderWrapChildren;
    }()
  }, {
    key: 'renderPlainChildren',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(page) {
        var i;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < this.children.length)) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 4;
                return this.children[i].render(page);

              case 4:
                i++;
                _context4.next = 1;
                break;

              case 7:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function renderPlainChildren(_x5) {
        return _ref6.apply(this, arguments);
      }

      return renderPlainChildren;
    }()
  }, {
    key: 'renderChildren',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(page) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!page.props.wrap) {
                  _context5.next = 5;
                  break;
                }

                _context5.next = 3;
                return this.renderWrapChildren(page);

              case 3:
                _context5.next = 7;
                break;

              case 5:
                _context5.next = 7;
                return this.renderPlainChildren(page);

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function renderChildren(_x6) {
        return _ref7.apply(this, arguments);
      }

      return renderChildren;
    }()
  }]);

  return Base;
}();

Base.defaultProps = {
  style: {}
};


Object.assign(Base.prototype, _debug2.default);
Object.assign(Base.prototype, _borders2.default);

exports.default = Base;