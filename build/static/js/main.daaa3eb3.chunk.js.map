{"version":3,"sources":["components/NoteForm.js","components/NotesList.js","components/Note.js","App.js","serviceWorker.js","index.js"],"names":["NoteForm","props","react_default","a","createElement","react","className","isUpdating","type","value","note","title","placeholder","name","onChange","handleChange","rows","cols","wraps","body","onClick","event","preventDefault","console","log","handleUpdateNote","id","history","push","handleAddNewNote","handleSubmit","NotesList","notesList","length","map","key","concat","slice","ReactModal","setAppElement","Note","find","match","params","noteId","goToUpdateNoteForm","handleOpenModal","lib_default","isOpen","showModal","contentLabel","handleDeleteNote","handleCloseModal","blankNoteForm","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","fetchNotes","axios","get","then","response","notesData","data","catch","err","objectSpread","state","defineProperty","target","post","newNote","toConsumableArray","delete","filteredNotes","filter","put","updatedNotes","tags","bind","assertThisInitialized","_this2","NavLink","exact","to","Switch","Route","path","render","components_NotesList","assign","components_NoteForm","components_Note","React","Component","withRouter","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.daaa3eb3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nimport './ComponentStyle.css';\n\nfunction NoteForm(props) {\n  function handleSubmit(event) {\n    event.preventDefault();\n    console.log(props.isUpdating, 'noteform');\n    if (props.isUpdating) {\n      props.handleUpdateNote(props.note.id);\n      props.history.push('/');\n    } else {\n      props.handleAddNewNote();\n      props.history.push('/');\n    }\n  }\n\n  return (\n    <Fragment>\n      <div className=\"note-form-view\">\n        <h2>{props.isUpdating ? 'Edit Note:' : 'Create New Note:'}</h2>\n        <form>\n          <div>\n            <input\n              className=\"title-input\"\n              type=\"text\"\n              value={props.note.title}\n              placeholder=\"Note Title\"\n              name=\"title\"\n              onChange={props.handleChange}\n            />\n          </div>\n          <div>\n            <textarea\n              placeholder=\"Note Content\"\n              rows=\"1\"\n              cols=\"50\"\n              wraps=\"physical\"\n              className=\"content-input\"\n              type=\"text\"\n              value={props.note.body}\n              name=\"body\"\n              onChange={props.handleChange}\n            />\n          </div>\n          <button\n            className=\"button create\"\n            onClick={event => handleSubmit(event)}\n          >\n            {props.isUpdating ? 'Update' : 'Save'}\n          </button>\n        </form>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default NoteForm;\n","import React from 'react';\n\nimport './ComponentStyle.css';\n\nfunction NotesList(props) {\n  if (!props.notesList.length) {\n    return <h1>Fetching notes!</h1>;\n  }\n  return (\n    <div className=\"note-container\">\n      <h1 className=\"notes-title\">Your Notes:</h1>\n      {props.notesList.map(note => (\n        <div key={note.id} className=\"note-card\">\n          <h1\n            className=\"note-title\"\n            onClick={() => props.history.push(`/${note.id}`)}\n          >\n            {note.title.length > 20\n              ? `${note.title.slice(0, 20)}...`\n              : note.title}\n          </h1>\n          <span className=\"line\" />\n          <p className=\"note-text\">\n            {note.body.length > 120\n              ? `${note.body.slice(0, 120)}...`\n              : note.body}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default NotesList;\n","import React, { Fragment } from 'react';\nimport ReactModal from 'react-modal';\n\nimport './ComponentStyle.css';\n\nReactModal.setAppElement('#root');\n\nfunction Note(props) {\n  console.log(props);\n  const note = props.notesList.find(\n    note => note.id == props.match.params.noteId\n  );\n  console.log(note);\n\n  function handleDelete() {\n    props.handleDeleteNote(note.id);\n    props.history.push(`/`);\n  }\n  console.log(props);\n  return (\n    <Fragment>\n      <div className=\"single-note\">\n        <button\n          className=\"note-button\"\n          onClick={event => {\n            event.preventDefault();\n            props.goToUpdateNoteForm(note);\n          }}\n        >\n          Edit\n        </button>\n        <button className=\"note-button\" onClick={props.handleOpenModal}>\n          Delete\n        </button>\n\n        <ReactModal\n          isOpen={props.showModal}\n          contentLabel=\"Minimal Modal Example\"\n          className=\"modal-style\"\n        >\n          <div className=\"confirm\">Are you sure you want to delete this?</div>\n          <div className=\"button-row\">\n            <button className=\"delete\" onClick={handleDelete}>\n              Delete\n            </button>\n            <button className=\"button\" onClick={props.handleCloseModal}>\n              No\n            </button>\n          </div>\n        </ReactModal>\n\n        {/* <button className=\"note-button\" onClick={handleDelete}>\n          Delete\n        </button> */}\n\n        <div>\n          <h1 className=\"note-name\">{note.title}</h1>\n          <h4 className=\"note-body\">{note.body}</h4>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Note;\n","import React from 'react';\nimport { NotesList, Note, NoteForm } from './components';\nimport { Route, NavLink, withRouter, Switch } from 'react-router-dom';\nimport ReactModal from 'react-modal';\nimport axios from 'axios';\n\nimport './components/ComponentStyle.css';\n\nimport './App.css';\n\nconst blankNoteForm = {\n  title: '',\n  body: ''\n};\n\nReactModal.setAppElement('#root');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      notesData: [],\n      note: {\n        tags: ['tag', 'otherTag'],\n        title: '',\n        body: ''\n      },\n      isUpdating: false,\n      showModal: false\n    };\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n\n  handleOpenModal = () => {\n    console.log('fired');\n    this.setState({ showModal: true });\n  };\n\n  handleCloseModal = () => {\n    this.setState({ showModal: false });\n  };\n\n  componentDidMount() {\n    this.fetchNotes();\n  }\n  fetchNotes = () => {\n    axios\n      .get('http://localhost:9000/api/notes')\n      .then(response => {\n        console.log(response);\n        this.setState({ notesData: response.data });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleChange = event => {\n    this.setState({\n      note: {\n        ...this.state.note,\n        [event.target.name]: event.target.value\n      }\n    });\n  };\n\n  handleAddNewNote = () => {\n    axios\n      .post('http://localhost:9000/api/notes', this.state.note)\n      .then(response => {\n        let newNote = this.state.note;\n        newNote.id = response.data.id;\n        this.setState({\n          notesData: [...this.state.notesData, newNote],\n          note: blankNoteForm\n        });\n      });\n  };\n\n  handleDeleteNote = noteId => {\n    axios\n      .delete(`http://localhost:9000/api/notes/${noteId}`)\n      .then(response => {\n        const filteredNotes = this.state.notesData.filter(\n          note => note.id !== noteId\n        );\n        this.setState({ notesData: filteredNotes });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  goToUpdateNoteForm = note => {\n    this.setState(\n      {\n        note,\n        isUpdating: true\n      },\n      () => console.log(this.state.isUpdating)\n    );\n    this.props.history.push('/note-form');\n  };\n\n  handleUpdateNote = noteId => {\n    console.log('this has launched');\n    axios\n      .put(`http://localhost:9000/api/notes/${noteId}`, this.state.note)\n      .then(response => {\n        console.log('response', response);\n        const updatedNotes = this.state.notesData.map(note => {\n          console.log(note.id, response.data.id, note.id == response.data.id);\n          if (note.id == response.data.id) {\n            return response.data;\n          } else {\n            return note;\n          }\n        });\n        this.setState({\n          notesData: updatedNotes,\n          isUpdating: false,\n          note: blankNoteForm\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"notes-display\">\n        <div className=\"sidebar\">\n          <h1 className=\"sidebar-title\">Lambda Notes</h1>\n\n          <button className=\"button\">\n            <NavLink exact to=\"/\">\n              View Your Notes\n            </NavLink>\n          </button>\n\n          <button className=\"button\">\n            <NavLink to=\"/note-form\">+ Create New Note</NavLink>\n          </button>\n        </div>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <NotesList {...props} notesList={this.state.notesData} />\n            )}\n          />\n          <Route\n            path=\"/note-form\"\n            render={props => (\n              <NoteForm\n                {...props}\n                notesList={this.state.notesData}\n                note={this.state.note}\n                handleAddNewNote={this.handleAddNewNote}\n                handleChange={this.handleChange}\n                handleUpdateNote={this.handleUpdateNote}\n                isUpdating={this.state.isUpdating}\n              />\n            )}\n          />\n          <Route\n            path=\"/:noteId\"\n            render={props => (\n              <Note\n                {...props}\n                notesList={this.state.notesData}\n                handleDeleteNote={this.handleDeleteNote}\n                handleOpenModal={this.handleOpenModal}\n                handleCloseModal={this.handleCloseModal}\n                goToUpdateNoteForm={this.goToUpdateNoteForm}\n                showModal={this.state.showModal}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}